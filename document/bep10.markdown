# [扩展协议](http://www.bittorrent.org/beps/bep_0010.html)

此协议的目的是为扩展BT协议提供简单而轻巧的工具。 支持此协议可以轻松添加新的扩展，而不会干扰不支持此扩展的标准BT协议或客户端或您想要添加的扩展。

要向您支持的其他客户进行广播，需要使用保留字节中的一位（bit）。

为扩展协议选择的位是从右侧的第 20bit（计数从 0 开始）。 因此（reserved_byte[5]如 0x10）被用于检查客户端是否支持扩展消息。

一旦建立了对协议的支持，客户端应该支持 1 条新消息：

|name    |        id|
|----|----|
|extended|    20|

此消息像任何其他BT消息一样发送，其中有 4 个字节长度的前缀和1个字节来识别消息（在这种情况下，他是为 20）。在消息有效载荷的开头，是一个1字节的标识符。 此标识符可以指不同的扩展消息，并且只指定一个 ID，0。如果 ID 是
0，则消息是下面描述的握手消息。一般扩展消息的布局如下（包括BT协议使用的消息头）：

|size|                    description|
|----|----|
|uint32_t     |       长度前缀。指定整个消息的字节数 大端序|
|uint8_t     |               bittorrent message ID, = 20|
|uint8_t      |              extended message ID. 0 = handshake, >0 = extended message as specified by the handshake.|

# handshake message

握手消息的有效载荷是bencode dict。字典中的所有项目都是可选的。客户端应忽略任何未知名称。dict的所有部分都对大小写敏感。这是dict中的定义项目：

|name    |  description|
|----|----|
|m   |      支持扩展消息dict，其中将扩展的名称映射到每个扩展消息的扩展消息 ID。这些 ID 的唯一要求是，没有扩展消息共享相同的扩展消息。将扩展编号设置为零意味着不支持/禁用扩展。客户端应忽略它不识别的任何扩展名称。扩展消息 ID( extended message ID) 是用于向发送此握手的peer发送扩展消息的 ID。即 ID 是此特定同行的本地 ID。|

以下是具体实现可以选择支持的一些其他项目：

|name    |  description|
|----|----|
|p|本地 TCP 侦听端口。允许双方了解对方的 TCP 端口号。请注意，连接的接收方无需发送此扩展消息，因为其端口号已为已知。|
|v|客户端名称和版本（作为 utf-8 字符串）。这是一种比依赖peer id编码更可靠的识别客户端的方法。|
|yourip|包含 ip 地址的紧凑表示的字符串，此同行认为您为。即这是接收方的外部 IP 地址（不包括端口）。这可能是 IPv4 （4 字节） 或 IPv6 （16 字节） 地址。|
|ipv6|    如果此peer具有 IPv6 接口，则此地址（16 字节）的紧凑表示。客户可能更喜欢通过 IPv6 地址进行连接|
|ipv4|如果此peer具有 IPv4 接口，则此地址（4 字节）的紧凑表示。客户可能更喜欢通过此接口进行连接。|
|reqq|整数，此客户端支持的未解决而不会进行删除的消息的数量（request queue 缓冲区）。在自由中的默认值是250|

握手dict还可以包括扩展的握手信息，例如对加密报头的支持或任何可以想象到的内容。

握手消息的有效载荷可能是什么样子的示例

|Dictionary||
|----|----|
|m|{"LT_metadata":1,"ut_pex":0}|
|p    |6881|
|v    |"µTorrent 1.2"|

使用bencode编码
d1:md11:LT_metadatai1e6:µT_PEXi2ee1:pi6881e1:v13:\xc2\xb5Torrent 1.2e

为确保扩展名称不会误碰撞，应加上用于识别引入扩展的客户端的两个（或一个）字符的前缀（如LT ut）。这既适用于扩展消息的名称，也适用于放在顶级字典中的任何其他信息。
除非由此规范定义，否则所有一和二个分节标识符均无效使用。

此消息应在bt握手后立即发送给任何支持此扩展协议的peer。
在连接的生命周期内多次发送握手消息是有效的，发送客户端不应断开连接。
实施可能会选择忽略随后的握手消息（或其中的一部分）。

随后的握手消息可用于启用/禁用扩展，而无需重新启动连接。
如果peer支持在运行时更改扩展，则应注意m字典是用来更新的。它包含扩展列表的实际更改就足够了。要在运行时禁用对LT_metadata的支持，而不影响任何其他扩展，应发送此消息：d11：LT_metadatai0ee。如上所述，值 0 用于关闭扩展。

扩展 ID 必须为每个peer保存，因为每个peer可能具有相同的扩展的不同 ID。

此规范故意不指定任何扩展，如peer交换或元数据交换。此协议只是实际扩展到 bittorrent 协议的传输，上示例中指定的扩展（ p）只是可能扩展的示例。

# 理由
扩展消息的 ID 之所以在握手报文中定义，是因为避免消息 ID 的全球注册。相反，扩展消息的名称需要独特的名称，如果没有全球注册则更容易做到。
公约是在扩展消息名称上使用两个字母前缀，前缀将客户端识别为首先实现了扩展消息。例如，LT_metadata被 libtorrent实现，因此它有LT前缀。

如果客户端支持的扩展可以决定其接收的消息将具有哪些数字，则意味着它们是该客户端中的常数。即它们可用于交换机（switch）语句。另一端很容易存储我们期望的带有 ID 的消息数组，
并在每次发送扩展消息时将其用于查找。

用字典而不是数组（使用隐式分配索引号）的原因是，
如果客户端想要禁用某些扩展，ID 编号将更改，并且无法使用常数（因此，不在switch中使用它们）。如果消息 ID 将直接映射到bt message ID，它也可以用固定的message id映射握手报文中的扩展到已经存在的扩展

将单个字节作为扩展消息标识符背后的理由是遵循bt spec。1个字节就够了。
它不会限制扩展的总数，只会限制同时使用的扩展数量。

使用单个字节标识符进行标准化握手标识符的原因是 1） DHT 使用单个 byte 标识符。2） 节省带宽。较长消息的唯一优点是，它使协议对人类更易读，
但 BT 协议的设计不是人类可读协议，所以为什么要费心呢？  （redis激怒）

